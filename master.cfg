# -*- python -*-
# ex: set filetype=python:

import os
import multiprocessing

from buildbot.plugins import worker, schedulers, changes, util, steps

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory.

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}


# PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot installation's
# home pages (linked to the 'titleURL').

c['title'] = "Chigraph"
c['titleURL'] = "https://chigraph.io"


# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server is visible. This typically uses the port number set in
# the 'www' entry below, but with an externally-visible host name which the
# buildbot cannot figure out without some help.

c['buildbotURL'] = "https://ci.chigraph.io/"


# 'protocols' contains information about protocols which master will use for
# communicating with workers. You must define at least 'port' option that workers
# could connect to your master with this protocol.
# 'port' must match the value configured into the workers (with their
# --master option)
c['protocols'] = {'pb': {'port': 9989}}

# WORKERS

# The 'workers' list defines the set of recognized workers. Each element is
# a Worker object, specifying a unique worker name and password.  The same
# worker name and password must be configured on the worker.

c['workers'] = [worker.Worker("example-worker", 'pass', max_builds=1)]

if 'BUILDBOT_MQ_URL' in os.environ:
    c['mq'] = {
        'type': 'wamp',
        'router_url': os.environ['BUILDBOT_MQ_URL'],
        'realm': os.environ.get('BUILDBOT_MQ_REALM', 'buildbot').decode('utf-8'),
        'debug': 'BUILDBOT_MQ_DEBUG' in os.environ,
        'debug_websockets': 'BUILDBOT_MQ_DEBUG' in os.environ,
        'debug_lowlevel': 'BUILDBOT_MQ_DEBUG' in os.environ,
    }

# CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.  Here we point to the

c['change_source'] = []
c['change_source'].append(changes.PBChangeSource())

# BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which workers can execute them.  Note that any particular build will
# only take place on one worker.

c['builders'] = []

allJobs = []

for gccver in ["5", "6", "7"]:
    for llvmver in ["3.5", "3.6", "3.7", "3.8", "3.9", "4.0", "5.0", "6.0"]:
        for buildtype in ["debug", "release"]:

            factory = util.BuildFactory()

            factory.addStep(steps.GitHub(repourl="https://github.com/chigraph/chigraph",
                                         progress=True, method="fresh", getDescription=True))
            factory.addStep(steps.CMake(generator="Ninja", definitions={
                "CMAKE_CXX_COMPILER": "g++-{}".format(gccver),
                "CMAKE_BUILD_TYPE": buildtype,
                "LLVM_CONFIG": "/usr/lib/llvm-{}/bin/llvm-config".format(llvmver),
                "CG_USE_SYSTEM_LIBGIT2": "OFF",
                "CG_BUILD_DEBUGGER": "OFF",
            }))
            factory.addStep(steps.Compile(
                command=["ninja", "-j{}".format(multiprocessing.cpu_count())]))
            factory.addStep(steps.Compile(name="test", command=["ninja", "test"], env={
                            "CTEST_OUTPUT_ON_FAILURE": "1"}))

            name = "chigraphtestllvm{}gcc{}{}".format(
                llvmver, gccver, buildtype)
            allJobs.append(name)

            c['builders'].append(
                util.BuilderConfig(name=name,
                                   workernames=["example-worker"],
                                   factory=factory))

# SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.  In this
# case, just kick off a 'llvm5gcc5' build

c['schedulers'] = []

defaultJobs = ["chigraphtestllvm3.5gcc5debug", "chigraphtestllvm3.7gcc6release",
               "chigraphtestllvm4.0gcc7release", "chigraphtestllvm5.0gcc7release", "chigraphtestllvm6.0gcc7release"]

c['schedulers'].append(schedulers.SingleBranchScheduler(
    name="commit",
    change_filter=util.ChangeFilter(
        project="chigraph/chigraph", branch='master'),
    treeStableTimer=3,
    builderNames=defaultJobs))
c['schedulers'].append(schedulers.ForceScheduler(
    name="force",
    builderNames=allJobs))

# STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# like IRC bots.

c['status'] = []


# minimalistic config to activate new web UI
c['www'] = dict(port=8080,
                plugins=dict(waterfall_view={}, console_view={}))

# Github webhook reciever
c["www"]["change_hook_dialects"] = {
    'github': {
        'secret': 'superdoopersecret431',
        'strict': True
    }
}

# DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url': os.environ.get("BUILDBOT_DB_URL", "sqlite://").format(**os.environ),
}
